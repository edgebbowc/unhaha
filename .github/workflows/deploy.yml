# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Spring Boot CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  RESOURCE_PATH: ./src/main/resources/application-prod.yml

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests with test profile
        run: ./gradlew test -Dspring.profiles.active=test

  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests with test profile
        run: ./gradlew test -Dspring.profiles.active=test

      - name: Replace environment variables in application.yml
        env:
          # Database
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_DB: ${{ secrets.MYSQL_DB }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          # Redis
          UPSTASH_REDIS_HOST: ${{ secrets.UPSTASH_REDIS_HOST }}
          UPSTASH_REDIS_PASSWORD: ${{ secrets.UPSTASH_REDIS_PASSWORD }}
          # OAuth
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
          NAVER_CALLBACK_URL: ${{ secrets.NAVER_CALLBACK_URL }}
          # GCP
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_STORAGE_BUCKET: ${{ secrets.GCP_STORAGE_BUCKET }}
          GCP_SA_KEY_BASE64: ${{ secrets.GCP_SA_KEY_BASE64 }}
        run: |
          envsubst < ${{ env.RESOURCE_PATH }} > ./src/main/resources/application-temp.yml
          mv ./src/main/resources/application-temp.yml ${{ env.RESOURCE_PATH }}

      - name: Verify configuration
        run: |
          echo "✅ application-prod.yml 환경변수 치환 완료"
          ls -la ./src/main/resources/application*.yml

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Rename JAR file
        run: |
          JAR_FILE=$(find ./build/libs -name "*.jar" ! -name "*-plain.jar" | head -n 1)
          cp "$JAR_FILE" ./app.jar
          echo "✅ JAR 파일 생성 완료: $(ls -lh app.jar)"

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}

      - name: Copy JAR to GCP VM
        run: |
          echo "📦 JAR 파일을 서버로 전송 중..."
          scp -o StrictHostKeyChecking=no ./app.jar ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }}:/home/${{ secrets.GCP_VM_USER }}/app.jar
          echo "✅ 파일 전송 완료"

      - name: Deploy on GCP VM with prod profile
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} << 'EOF'
            echo "🚀 배포 시작..."

            # 1단계: Dead screen 세션 정리
            echo "🧹 Dead screen 세션 정리..."
            screen -wipe 2>/dev/null || true

            # 2단계: 기존 애플리케이션 강제 종료
            echo "⏹️ 기존 애플리케이션 종료 중..."
            sudo pkill -9 -f "java -jar.*app.jar" || true

            # 3단계: 모든 app-session screen 종료
            echo "📺 기존 Screen 세션 정리..."
            screen -ls | grep "app-session" | cut -d. -f1 | awk '{print $1}' | xargs -I {} screen -S {} -X quit 2>/dev/null || true
            sleep 2
            sudo pkill -9 -f "screen.*app-session" || true

            # 4단계: 포트 사용 프로세스 확인 및 종료
            PORT_PID=$(sudo lsof -t -i:8080 2>/dev/null || true)
            if [ ! -z "$PORT_PID" ]; then
            echo "🔍 8080 포트 사용 프로세스 발견: $PORT_PID"
            sudo kill -9 $PORT_PID || true
            fi

            # 5단계: 포트 해제 확인
            echo "⏳ 포트 해제 확인 중..."
            sleep 15
            if sudo lsof -i:8080 2>/dev/null; then
            echo "❌ 포트 8080이 여전히 사용 중입니다."
            sudo lsof -i:8080
            exit 1
            fi
            
            # 6단계: 애플리케이션 실행 (prod 프로필로, screen 사용)
            echo "▶️ 애플리케이션 시작 중 (prod 프로필)..."
            cd /home/${{ secrets.GCP_VM_USER }}
            
            # 고유한 세션명 생성 (타임스탬프 포함)
            SESSION_NAME="app-session-$(date +%Y%m%d-%H%M%S)"
            screen -dmS "$SESSION_NAME" bash -c "java -jar -Dspring.profiles.active=prod app.jar > app.log 2>&1"
            
            # 7단계: 프로세스 시작 확인
            echo "⏳ 애플리케이션 시작 대기 (30초)..."
            sleep 30
            if pgrep -f "java -jar.*app.jar" > /dev/null; then
              echo "✅ 애플리케이션이 성공적으로 시작되었습니다."
              echo "📋 실행 중인 프로세스: $(pgrep -f 'java -jar.*app.jar')"
              echo "📺 Screen 세션: $(screen -list | grep app-session || echo 'Screen 세션을 찾을 수 없습니다.')"
            else
              echo "❌ 애플리케이션 시작에 실패했습니다."
              echo "📄 최근 로그 (마지막 50줄):"
              tail -n 50 app.log
              exit 1
            fi
          EOF

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
      - name: Notify deployment result
        run: |
          if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
            echo "🎉 배포가 성공적으로 완료되었습니다!"
            echo "🌐 애플리케이션 URL: http://${{ secrets.GCP_VM_IP }}:8080"
            echo "📊 Health Check: http://${{ secrets.GCP_VM_IP }}:8080/actuator/health"
          else
            echo "💥 배포가 실패했습니다."
            echo "🔍 로그를 확인하여 문제를 해결해주세요."
          fi
